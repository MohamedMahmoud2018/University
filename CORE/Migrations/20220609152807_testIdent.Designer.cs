// <auto-generated />
using System;
using CORE;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CORE.Migrations
{
    [DbContext(typeof(ApplicationDBContext))]
    [Migration("20220609152807_testIdent")]
    partial class testIdent
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.16")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CORE.DAL.AcademicDegree", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("AcademicDegree");
                });

            modelBuilder.Entity("CORE.DAL.AcademicRank", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("AcademicRank");
                });

            modelBuilder.Entity("CORE.DAL.CertificateType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.HasKey("Id");

                    b.ToTable("CertificateType");
                });

            modelBuilder.Entity("CORE.DAL.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ArabicName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("EnglishName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("City");
                });

            modelBuilder.Entity("CORE.DAL.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ArabicName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("EnglishName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("Country");
                });

            modelBuilder.Entity("CORE.DAL.DiscoveryChannels", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("DiscoveryChannels");
                });

            modelBuilder.Entity("CORE.DAL.ExperienceSpecialityRelation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.HasKey("Id");

                    b.ToTable("ExperienceSpecialityRelation");
                });

            modelBuilder.Entity("CORE.DAL.Gender", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("Gender");
                });

            modelBuilder.Entity("CORE.DAL.Grade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Degree")
                        .HasColumnType("int");

                    b.Property<int>("MaxValue")
                        .HasColumnType("int");

                    b.Property<int>("MinValue")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Degree" }, "UQ__Grade__C831FD881056A0A5")
                        .IsUnique();

                    b.ToTable("Grade");
                });

            modelBuilder.Entity("CORE.DAL.KPI", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("KPICategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Wehight")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "KPICategoryId" }, "IX_KPI_KPICategoryId");

                    b.ToTable("KPI");
                });

            modelBuilder.Entity("CORE.DAL.KPICategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Wehight")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("KPICategory");
                });

            modelBuilder.Entity("CORE.DAL.PositionAbbreviation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PositionAbbreviation");
                });

            modelBuilder.Entity("CORE.DAL.ProfileAcademicDegree", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AcademicDegreeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DegreeEndDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DegreeStartDate")
                        .HasColumnType("date");

                    b.Property<int>("ProfileId")
                        .HasColumnType("int");

                    b.Property<int?>("SecondSpecialtyId")
                        .HasColumnType("int");

                    b.Property<int>("SpecialtyId")
                        .HasColumnType("int");

                    b.Property<string>("StudentActivity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UniversityId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SecondSpecialtyId");

                    b.HasIndex("SpecialtyId");

                    b.HasIndex("UniversityId");

                    b.HasIndex(new[] { "AcademicDegreeId" }, "IX_ProfileAcademicDegree_AcademicDegreeId");

                    b.HasIndex(new[] { "ProfileId" }, "IX_ProfileAcademicDegree_ProfileId");

                    b.ToTable("ProfileAcademicDegree");
                });

            modelBuilder.Entity("CORE.DAL.ProfileAwards", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("AwardDate")
                        .HasColumnType("datetime");

                    b.Property<string>("AwardName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("AwardValue")
                        .HasColumnType("int");

                    b.Property<string>("Donor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProfileId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProfileId");

                    b.ToTable("ProfileAwards");
                });

            modelBuilder.Entity("CORE.DAL.ProfileCourses", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CertificateTypeId")
                        .HasColumnType("int");

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Donor")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime");

                    b.Property<int>("ProfileId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ToDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("CertificateTypeId");

                    b.HasIndex(new[] { "ProfileId" }, "IX_ProfileCourses_ProfileId");

                    b.ToTable("ProfileCourses");
                });

            modelBuilder.Entity("CORE.DAL.ProfileEvaluation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Grade")
                        .HasColumnType("int");

                    b.Property<int>("KPICategoryId")
                        .HasColumnType("int");

                    b.Property<int>("KPIDegree")
                        .HasColumnType("int");

                    b.Property<int>("KPIId")
                        .HasColumnType("int");

                    b.Property<int>("PofileId")
                        .HasColumnType("int");

                    b.Property<int>("SupKPIDegree")
                        .HasColumnType("int");

                    b.Property<int>("SupKPIId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "KPICategoryId" }, "IX_ProfileEvaluation_KPICategoryId");

                    b.HasIndex(new[] { "KPIId" }, "IX_ProfileEvaluation_KPIId");

                    b.HasIndex(new[] { "PofileId" }, "IX_ProfileEvaluation_PofileId");

                    b.HasIndex(new[] { "SupKPIId" }, "IX_ProfileEvaluation_SupKPIId");

                    b.ToTable("ProfileEvaluation");
                });

            modelBuilder.Entity("CORE.DAL.ProfileExperiences", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Employer")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime");

                    b.Property<string>("JopName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("ProfileId")
                        .HasColumnType("int");

                    b.Property<int?>("SpecialityRelationId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ToDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("SpecialityRelationId");

                    b.HasIndex(new[] { "ProfileId" }, "IX_ProfileExperiences_ProfileId");

                    b.ToTable("ProfileExperiences");
                });

            modelBuilder.Entity("CORE.DAL.ProfileScientificResearch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Journal")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("JournalImpactFactor")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("ProfileId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PublishingDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ResearchTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProfileId");

                    b.ToTable("ProfileScientificResearch");
                });

            modelBuilder.Entity("CORE.DAL.ScientificResearchParticipant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProfileScientificResearchId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProfileScientificResearchId");

                    b.ToTable("ScientificResearchParticipant");
                });

            modelBuilder.Entity("CORE.DAL.Specialty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("Specialty");
                });

            modelBuilder.Entity("CORE.DAL.SupKPI", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("KPICategoryId")
                        .HasColumnType("int");

                    b.Property<int>("KPIId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Wehight")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "KPICategoryId" }, "IX_SupKPI_KPICategoryId");

                    b.HasIndex(new[] { "KPIId" }, "IX_SupKPI_KPIId");

                    b.ToTable("SupKPI");
                });

            modelBuilder.Entity("CORE.DAL.University", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("University");
                });

            modelBuilder.Entity("CORE.DAL.profile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AcademicRankId")
                        .HasColumnType("int");

                    b.Property<string>("CVPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CurrentJop")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("DiscoveryChannelId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("GenderId")
                        .HasColumnType("int");

                    b.Property<string>("MainJob")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("PositionAbbreviationId")
                        .HasColumnType("int");

                    b.Property<string>("ProfilePicturePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ProfileState")
                        .HasColumnType("bit");

                    b.Property<string>("Serial")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("SpecialtyId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AcademicRankId");

                    b.HasIndex(new[] { "Email" }, "AK_Profile_Email")
                        .IsUnique();

                    b.HasIndex(new[] { "PhoneNumber" }, "AK_Profile_PhoneNumber")
                        .IsUnique();

                    b.HasIndex(new[] { "DiscoveryChannelId" }, "IX_Profile_DiscoveryChannelId");

                    b.HasIndex(new[] { "GenderId" }, "IX_Profile_GenderId");

                    b.HasIndex(new[] { "PositionAbbreviationId" }, "IX_Profile_PositionAbbreviationId");

                    b.HasIndex(new[] { "SpecialtyId" }, "IX_Profile_SpecialtyId");

                    b.ToTable("profile");
                });

            modelBuilder.Entity("CORE.Identity.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityRole");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("CORE.Identity.ApplicationRole", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityRole");

                    b.HasDiscriminator().HasValue("ApplicationRole");
                });

            modelBuilder.Entity("CORE.DAL.City", b =>
                {
                    b.HasOne("CORE.DAL.Country", "Country")
                        .WithMany("City")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("CORE.DAL.KPI", b =>
                {
                    b.HasOne("CORE.DAL.KPICategory", "KPICategory")
                        .WithMany("KPI")
                        .HasForeignKey("KPICategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("KPICategory");
                });

            modelBuilder.Entity("CORE.DAL.ProfileAcademicDegree", b =>
                {
                    b.HasOne("CORE.DAL.AcademicDegree", "AcademicDegree")
                        .WithMany("ProfileAcademicDegree")
                        .HasForeignKey("AcademicDegreeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CORE.DAL.profile", "Profile")
                        .WithMany("ProfileAcademicDegree")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CORE.DAL.Specialty", "SecondSpecialty")
                        .WithMany("ProfileAcademicDegreeSecondSpecialty")
                        .HasForeignKey("SecondSpecialtyId");

                    b.HasOne("CORE.DAL.Specialty", "Specialty")
                        .WithMany("ProfileAcademicDegreeSpecialty")
                        .HasForeignKey("SpecialtyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CORE.DAL.University", "University")
                        .WithMany("ProfileAcademicDegree")
                        .HasForeignKey("UniversityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AcademicDegree");

                    b.Navigation("Profile");

                    b.Navigation("SecondSpecialty");

                    b.Navigation("Specialty");

                    b.Navigation("University");
                });

            modelBuilder.Entity("CORE.DAL.ProfileAwards", b =>
                {
                    b.HasOne("CORE.DAL.profile", "Profile")
                        .WithMany("ProfileAwards")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("CORE.DAL.ProfileCourses", b =>
                {
                    b.HasOne("CORE.DAL.CertificateType", "CertificateType")
                        .WithMany("ProfileCourses")
                        .HasForeignKey("CertificateTypeId");

                    b.HasOne("CORE.DAL.profile", "Profile")
                        .WithMany("ProfileCourses")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CertificateType");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("CORE.DAL.ProfileEvaluation", b =>
                {
                    b.HasOne("CORE.DAL.KPICategory", "KPICategory")
                        .WithMany("ProfileEvaluation")
                        .HasForeignKey("KPICategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CORE.DAL.KPI", "KPI")
                        .WithMany("ProfileEvaluation")
                        .HasForeignKey("KPIId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CORE.DAL.profile", "Pofile")
                        .WithMany("ProfileEvaluation")
                        .HasForeignKey("PofileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CORE.DAL.SupKPI", "SupKPI")
                        .WithMany("ProfileEvaluation")
                        .HasForeignKey("SupKPIId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("KPI");

                    b.Navigation("KPICategory");

                    b.Navigation("Pofile");

                    b.Navigation("SupKPI");
                });

            modelBuilder.Entity("CORE.DAL.ProfileExperiences", b =>
                {
                    b.HasOne("CORE.DAL.profile", "Profile")
                        .WithMany("ProfileExperiences")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CORE.DAL.ExperienceSpecialityRelation", "SpecialityRelation")
                        .WithMany("ProfileExperiences")
                        .HasForeignKey("SpecialityRelationId");

                    b.Navigation("Profile");

                    b.Navigation("SpecialityRelation");
                });

            modelBuilder.Entity("CORE.DAL.ProfileScientificResearch", b =>
                {
                    b.HasOne("CORE.DAL.profile", "Profile")
                        .WithMany("ProfileScientificResearch")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("CORE.DAL.ScientificResearchParticipant", b =>
                {
                    b.HasOne("CORE.DAL.ProfileScientificResearch", "ProfileScientificResearch")
                        .WithMany("ScientificResearchParticipant")
                        .HasForeignKey("ProfileScientificResearchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProfileScientificResearch");
                });

            modelBuilder.Entity("CORE.DAL.SupKPI", b =>
                {
                    b.HasOne("CORE.DAL.KPICategory", "KPICategory")
                        .WithMany("SupKPI")
                        .HasForeignKey("KPICategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CORE.DAL.KPI", "KPI")
                        .WithMany("SupKPI")
                        .HasForeignKey("KPIId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("KPI");

                    b.Navigation("KPICategory");
                });

            modelBuilder.Entity("CORE.DAL.profile", b =>
                {
                    b.HasOne("CORE.DAL.AcademicRank", "AcademicRank")
                        .WithMany("profile")
                        .HasForeignKey("AcademicRankId");

                    b.HasOne("CORE.DAL.DiscoveryChannels", "DiscoveryChannel")
                        .WithMany("profile")
                        .HasForeignKey("DiscoveryChannelId");

                    b.HasOne("CORE.DAL.Gender", "Gender")
                        .WithMany("profile")
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CORE.DAL.PositionAbbreviation", "PositionAbbreviation")
                        .WithMany("profile")
                        .HasForeignKey("PositionAbbreviationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CORE.DAL.Specialty", "Specialty")
                        .WithMany("profile")
                        .HasForeignKey("SpecialtyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AcademicRank");

                    b.Navigation("DiscoveryChannel");

                    b.Navigation("Gender");

                    b.Navigation("PositionAbbreviation");

                    b.Navigation("Specialty");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("CORE.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("CORE.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CORE.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("CORE.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CORE.DAL.AcademicDegree", b =>
                {
                    b.Navigation("ProfileAcademicDegree");
                });

            modelBuilder.Entity("CORE.DAL.AcademicRank", b =>
                {
                    b.Navigation("profile");
                });

            modelBuilder.Entity("CORE.DAL.CertificateType", b =>
                {
                    b.Navigation("ProfileCourses");
                });

            modelBuilder.Entity("CORE.DAL.Country", b =>
                {
                    b.Navigation("City");
                });

            modelBuilder.Entity("CORE.DAL.DiscoveryChannels", b =>
                {
                    b.Navigation("profile");
                });

            modelBuilder.Entity("CORE.DAL.ExperienceSpecialityRelation", b =>
                {
                    b.Navigation("ProfileExperiences");
                });

            modelBuilder.Entity("CORE.DAL.Gender", b =>
                {
                    b.Navigation("profile");
                });

            modelBuilder.Entity("CORE.DAL.KPI", b =>
                {
                    b.Navigation("ProfileEvaluation");

                    b.Navigation("SupKPI");
                });

            modelBuilder.Entity("CORE.DAL.KPICategory", b =>
                {
                    b.Navigation("KPI");

                    b.Navigation("ProfileEvaluation");

                    b.Navigation("SupKPI");
                });

            modelBuilder.Entity("CORE.DAL.PositionAbbreviation", b =>
                {
                    b.Navigation("profile");
                });

            modelBuilder.Entity("CORE.DAL.ProfileScientificResearch", b =>
                {
                    b.Navigation("ScientificResearchParticipant");
                });

            modelBuilder.Entity("CORE.DAL.Specialty", b =>
                {
                    b.Navigation("profile");

                    b.Navigation("ProfileAcademicDegreeSecondSpecialty");

                    b.Navigation("ProfileAcademicDegreeSpecialty");
                });

            modelBuilder.Entity("CORE.DAL.SupKPI", b =>
                {
                    b.Navigation("ProfileEvaluation");
                });

            modelBuilder.Entity("CORE.DAL.University", b =>
                {
                    b.Navigation("ProfileAcademicDegree");
                });

            modelBuilder.Entity("CORE.DAL.profile", b =>
                {
                    b.Navigation("ProfileAcademicDegree");

                    b.Navigation("ProfileAwards");

                    b.Navigation("ProfileCourses");

                    b.Navigation("ProfileEvaluation");

                    b.Navigation("ProfileExperiences");

                    b.Navigation("ProfileScientificResearch");
                });
#pragma warning restore 612, 618
        }
    }
}
